1.VCS (Version Control System) 이란 무엇인가?
VCS(Version Control System)는 소프트웨어 개발에서 소스 코드, 문서, 데이터 파일 등의 변경 내역을 추적하고 관리하는 시스템입니다.

2.GIT 이 SVN 과 같은 중앙집중식 VCS 와 가장 큰 차이는 무엇인가?
Git은 분산형 버전 관리 시스템이고, SVN은 중앙집중식 버전 관리 시스템입니다.
git은 개발자가 작업을 하면서 로컬 저장소에 변경 사항을 기록하고, 필요할 때 서버로 변경 사항을 전송하는 방식이므로 중앙서버에 의존하는 중앙집중식 VCS에 비해 유연성이 높고, 협업이 쉽고 빠릅니다.


3.파일의 변경 사항을 저장소에 반영할 때 git add 와 git add –p 의 차이는 무엇인가?
git add 명령어는 변경된 모든 파일을 Staging Area에 추가하지만 git add -p 명령어는 파일의 변경 내용을 확인하면서 일부 변경 내용만 Staging Area에 추가할 수 있습니다.

4.다음 페이지의 Git lifecycle 을 참고해서 다음 케이스들에서 file1 이 어떤 state 인지 기술하라. (참고: git status 로 확인 가능하다.)
    -저장소에 없는 file1 이라는 파일을 메모장으로 만든 직후 : untracked
    -git add 와 git commit 으로 file1 을 저장소에 추가한 직후 : unmodified 
    -file의 내용을 수정한 직후 : modified
    -수정한 file1을 git add 또는 git add –p 한 직후 : staged
    -git commit 명령을 한 직후 : unmodified

5.Step #6 에서 메모장으로 확인한 file1 의 내용은 무엇인가?
6.Step #7 에서 file2 는 존재하는가? 그 내용은 무엇인가? 만일 존재하지 않는다면 왜 존재하지 않는지 기술하라.
7.git show-branch 명령은 변경 사항에 대한 commit graph 를 보여준다.
    Step #1-#7 까지 작업한 뒤의 commit graph 는 어떻게 되는가? 
    
    Hello World
    What a wonderful world  

8.Step #8 로 생성한 github 상의 저장소 주소는 무엇인가?
    참고: 교수가 이 URL 에서 작업한 git 내용과 보고서를 가지고 채점할 예정임

    https://github.com/banblock/2023-1.git

9.git 에서 다른 branch 의 내용을 반영하는 방식에는 merge 와 rebase 가 있다.
    두 방식의 차이에 대해서 조사해서 설명하라.

merge는 두 개의 브랜치를 하나로 합치는 방법입니다. 이 방법은 각 브랜치의 변경 내용을 합쳐서 새로운 커밋을 만듭니다. 
새로운 커밋은 두 개의 브랜치를 모두 기반으로 하고, 합쳐진 브랜치의 이력을 그대로 유지합니다.
이 방식은 브랜치 간의 차이점을 쉽게 비교할 수 있고, 변경 내용을 합치는 과정에서 충돌을 해결할 수 있기 때문에 안정적입니다.
반면 rebase는 현재 브랜치가 다른 브랜치를 따라가도록 변경 내용을 다시 적용하는 방법입니다.
이 방법은 현재 브랜치의 변경 내용을 다른 브랜치로 이동시켜서, 마치 다른 브랜치에서 변경한 것처럼 보이게 하고 커밋 이력이 선형으로 유지되어 보기 좋은 커밋 히스토리를 만들어줍니다.
하지만 충돌을 해결하는 과정이 복잡하고, 잘못 사용하면 커밋 이력을 망가뜨릴 수 있습니다.


10.git cherry-pick 이 어떤 일을 하는 명령인지 조사해서 설명하라.

git cherry-pick 명령어는 다른 브랜치에서 하나의 커밋을 가져와 현재 브랜치에 적용하는 기능을 제공합니다. 이를 통해 특정 커밋을 선택적으로 다른 브랜치로 가져와 현재 브랜치에 반영할 수 있습니다.

11.git rebase -i 가 어떤 일을 하는 명령인지 조사하라. 직전 두 커밋의 순서를 바꾸고자 할 때 git rebase -i 를 써서 해결할 수 있다. 그 방법을 설명하라. 

git rebase -i 명령어는 커밋들의 순서를 변경하거나, 커밋 메시지를 변경하거나, 커밋을 합치거나, 커밋을 삭제하는 등 다양한 작업을 할 수 있습니다.
직전 두 커밋의 순서를 바꾸기 위해서는 다음과 같은 단계를 수행합니다.
1.git rebase -i HEAD~2 명령어를 실행하여 인터랙티브 리베이스 모드로 진입합니다. HEAD~2는 현재 브랜치의 끝에서 두 번째 커밋을 가리킵니다.
2.에디터가 열리면, 순서를 바꾸고자 하는 커밋의 위치를 찾아서 해당 커밋의 라인을 위아래로 이동시킵니다.
3.변경한 후에는 에디터를 저장하고 종료합니다. 그러면 git rebase가 적용되어 새로운 커밋이 생성됩니다.